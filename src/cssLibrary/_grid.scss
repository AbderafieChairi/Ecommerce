@use "sass:math";

$grid-columns: 12;
$grid-gaps: (
  "0": 0,
  "1": 5px,
  "2": 10px,
  "3": 15px,
);
$layout-values: (
  "start":flex-start, 
  "end":flex-end, 
  "center":center, 
  "s_b":space-between, 
  "s_a":space-around
);

// base layout classes
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}
.row {
  display: flex;
  flex-flow: row wrap;
}
.flex{
  flex:1;
  width: 100%;
}
.center{
  display: flex;
  justify-content: center;
  align-items: center;
}
.column{
  display: flex;
  flex-direction: column;
}
.al-left{
  align-items: flex-start;
}
.al-center{
  align-items: center;
}
.al-right{
  align-items: flex-end;
}


// grid gaps
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
  .gap-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
  .g-#{$key} {
    gap:$val;
  }
}

// justify content classes
@each $key, $val in $layout-values {
  .jst-#{$key} {
    justify-content: $val;
  }
}

// col classes
@include xs {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
